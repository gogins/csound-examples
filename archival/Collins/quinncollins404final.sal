;; Music 404 Final - Quinn Collins

;; Piano part

define variable markmel = {
                            {0 -> {0 .8} {2 .1} {-1 .1} {-2 .1}}
                            {1 -> {0 .6} {2 .1} {3 .1} {-1 .1} {-2 .1}}
                            {2 -> {0 .2} {1 .2} {2 .2} {-1 .2} {-2 .2}}
                            {3 -> {0 .1} {1 .1} {-1 .2} {2 .1} {-1 .2} {-3 .2} {-4 .1}}
                            {-1 -> {0 .2} {1 .2} {3 .2} {3 .2} {-2 .2}}
                            {-2 -> {0 .2} {1 .2} {3 .2} {3 .2} {-1 .2}}
                            {-3 -> {0 .2} {1 .2} {3 .2} {3 .2} {-2 .2}}
                            {-4 -> {0 .2} {1 .2} {3 .2} {3 .2} {-2 .2}}
                            }

define variable markharm = {
                            {1 -> {2 .1} {3 .1} {-1 .1} {-2 .1}}
                            {2 -> {1 .2} {2 .2} {-1 .2} {-2 .2}}
                            {3 -> {1 .1} {-1 .2} {2 .1} {-1 .2} {-3 .2} {-4 .1}}
                            {-1 -> {1 .2} {3 .2} {3 .2} {-2 .2}}
                            {-2 -> {1 .2} {3 .2} {3 .2} {-1 .2}}
                            {-3 -> {1 .2} {3 .2} {3 .2} {-2 .2}}
                            {-4 -> {1 .2} {3 .2} {3 .2} {-2 .2}}
                            }

define process piano3(num, pitch, notes, rhy)
  run
    with pat1 = make(<markov>, of: notes),
    pat2 = make(<palindrome>, of: rhy),
    pat3 = make(<weighting>, of: {{.05 :weight .2} 
                                  {.1 :weight .2}
                                  {.2 :weight .2}
                                  {.3 :weight .3}
                                  {.6 :weight .1}})
    repeat num
    for k = pitch + next(pat1)
    for r = next(pat2)
    for a = next(pat3)
    output make (<midi>, time: now(), duration: r, keynum: k, amplitude: a, channel: 0)
    wait r
    end

define process piano4(num, pitch, notes, rhy)
  run
    with pat1 = make(<markov>, of: notes),
    pat2 = make(<palindrome>, of: rhy),
    pat3 = make(<weighting>, of: {{.05 :weight .2} 
                                  {.1 :weight .2}
                                  {.2 :weight .2}
                                  {.3 :weight .3}
                                  {.4 :weight .1}})
    repeat num
    for k = pitch + next(pat1)
    for r = next(pat2)
    for a = next(pat3)
    output make (<midi>, time: now(), duration: r, keynum: k, amplitude: a, channel: 0)
    wait r
    end

define process piano2(num, pitch, notes, rate, loamp, hiamp)
  run
    with pat = make(<markov>, of: notes)
    repeat num
    for k = pitch + next(pat)
    output make (<midi>, time: now(), duration: rate, keynum: k, 
                 amplitude: between(loamp, hiamp), channel: 0)
    wait rate
    end

define process arppnodownup(pitch, rates)
  run
    with pat1 = make(<heap>, of: rates),
    pat2 = make(<cycle>, of: list(between(-36, -24), between(-24, -12), between(-12, 0), between(0, 12), between(12, 24), between(24, 36)))
    repeat 6
    for r = next(pat1)
    for k = pitch + next(pat2)
    output make(<midi>, time: now(), duration: r, keynum: k, amplitude: between(.1, .6), channel: 0)
    wait r
    end

define process arppnorand(pitch, rates)
  run
    with pat1 = make(<heap>, of: rates),
    pat2 = make(<heap>, of: list(between(-36, -24), between(-24, -12), between(-12, 0), between(0, 12), between(12, 24), between(24, 36)))
    repeat 6
    for r = next(pat1)
    for k = pitch + next(pat2)
    output make(<midi>, time: now(), duration: r, keynum: k, amplitude: between(.1, .6), channel: 0)
    wait r
    end

define process pedalon()
    run repeat 1
    output make(<midi-control-change>, 
                        time: now(), channel: 2, 
                        controller: 64, value: 127)
  end

define process pedaloff()
    run repeat 1
    output make(<midi-control-change>, 
                        time: now(), channel: 2, 
                        controller: 64, value: 0)
  end

define process pedalhalf()
    run repeat 1
    output make(<midi-control-change>, 
                        time: now(), channel: 2, 
                        controller: 64, value: 80)
  end

;; The sprout:

sprout list(pedalhalf(),

            piano3(75, 72, markharm, {2/3 1 4/3 5/3 2}),
            piano3(75, 72, markharm, {2/3 1 4/3 5/3 2}),
            piano3(75, 72, markharm, {2/3 1 4/3 5/3 2}),

            pedaloff(),
            pedalhalf(),

            piano3(40, 60, markharm, {2/3 1 4/3 5/3 2}),
            piano3(40, 60, markharm, {2/3 1 4/3 5/3 2}),
            piano3(40, 60, markharm, {2/3 1 4/3 5/3 2}),

            pedaloff(),
            pedalhalf(),

            piano3(20, 84, markmel, {2/3 1 4/3 5/3 2}),
            piano3(20, 84, markmel, {2/3 1 4/3 5/3 2}),
            
            pedaloff(),
            pedalhalf(),

            piano2(12, 36, markmel, 4, .2, .4),
            piano2(8, 48, markmel, 4, .1, .3),

            pedaloff(),
            pedalhalf(),

            pedaloff(),
            pedalhalf(),

            pedaloff(),
            pedalhalf(),

            pedaloff(),
            pedalhalf(),

            pedaloff(),
            pedalhalf(),

            piano3(20, 84, markmel, {2/3 1 4/3 5/3 2}),

            pedaloff(),


            pedalon(),
            
            arppnodownup(60, {1/10 1/9 1/8 1/7}),
            arppnorand(60, {1/10 1/9 1/8 1/7}),
            arppnodownup(60, {1/10 1/9 1/8 1/7}),
            arppnorand(60, {1/10 1/9 1/8 1/7}),
            arppnodownup(60, {1/10 1/9 1/8 1/7}),
            arppnorand(60, {1/10 1/9 1/8 1/7}),
            arppnodownup(60, {1/10 1/9 1/8 1/7}),
            arppnorand(60, {1/10 1/9 1/8 1/7}),

            pedaloff(),


            pedalhalf(),

            piano3(12, 64, markharm, {2/3 1 4/3 5/3 2}),
            piano3(12, 64, markharm, {2/3 1 4/3 5/3 2}),
            piano3(12, 64, markharm, {2/3 1 4/3 5/3 2}),
            arppnodownup(64, {1/10 1/9 1/8 1/7}),
            
            pedaloff(),
            
            piano2(12, 40, markmel, 4, .2, .4),
            piano2(8, 52, markmel, 4, .1, .3),

            pedalhalf(),
            pedaloff(),
            pedalon(),

            arppnodownup(64, {1/10 1/9 1/8 1/7}),
            arppnorand(64, {1/10 1/9 1/8 1/7}),

            pedaloff(),


            pedalhalf(),

            piano3(30, 70, markharm, {4/3 5/3 2 7/3 8/3}),
            piano3(30, 70, markharm, {4/3 5/3 2 7/3 8/3}),
            piano3(30, 70, markharm, {4/3 5/3 2 7/3 8/3}),
            arppnodownup(58, {1/10 1/9 1/8 1/7}),
            arppnorand(58, {1/10 1/9 1/8 1/7}),

            pedaloff(),
            pedalhalf(),
            
            piano3(16, 58, markharm, {4/3 5/3 2 7/3 8/3}),
            piano3(16, 58, markharm, {4/3 5/3 2 7/3 8/3}),
            piano3(16, 58, markharm, {4/3 5/3 2 7/3 8/3}),
            
            pedaloff(),
            pedalon(),
            
            arppnodownup(58, {1/7 1/6 1/5 1/4}),
            arppnorand(58, {1/7 1/6 1/5 1/4}),


            piano4(8, 88, markmel, {2/3 1 4/3 5/3 2}),
            piano4(8, 88, markmel, {2/3 1 4/3 5/3 2}),
            piano4(8, 88, markmel, {2/3 1 4/3 5/3 2}),
            piano4(8, 76, markmel, {2/3 1 4/3 5/3 2}),
            piano4(8, 76, markmel, {2/3 1 4/3 5/3 2}),
            piano4(8, 76, markmel, {2/3 1 4/3 5/3 2}),
            piano4(8, 64, markmel, {2/3 1 4/3 5/3 2}),
            piano4(8, 64, markmel, {2/3 1 4/3 5/3 2}),
            piano4(8, 64, markmel, {2/3 1 4/3 5/3 2}),

            pedaloff(),
            pedalhalf(),
            pedaloff(),
            pedalhalf(),
            pedaloff(),
            pedalhalf(),
            pedaloff(),
            pedalhalf(),

            
            pedaloff(),
            pedalon(),

            arppnodownup(56, {1/10 1/9 1/8 1/7}),
            arppnorand(56, {1/10 1/9 1/8 1/7}),
            arppnodownup(56, {1/10 1/9 1/8 1/7}),
            arppnorand(56, {1/10 1/9 1/8 1/7}),
            arppnodownup(56, {1/12 1/11 1/10 1/9}),
            
            pedaloff(),


            pedalon(),
            piano3(12, 92, markmel, {4/3 5/3 2 7/3}),
            piano3(12, 28, markmel, {4/3 5/3 2 7/3}),
            pedaloff()),

            {0
             0 0 0
             19 20
             20 20 20
             29 30
             30 32 
             33 34
             34 36
             39 40
             43 44
             47 48
             51 52
             55 56
             61 62
             62
             108
             
             110
             112 116 120 124 128 132 136 140 144
             144
             
             145
             145 145 145 146 
             148
             150 150 151
             151 152
             152 154
             155

             156
             156 156 156 157 159 
             159 160
             160 160 160
             178 179
             180 182

             182 182 182 182 182 182 182 182 182
             184 186 188 190 192 194 196 198
             
             208
             210
             210 215 220 225 230
             236
             
             237
             238 238
             282}


;;Tape Part

;;All sounds were generated using CLM - FM-Violin, FM-Bell, Grani, and Convolution.  Sounds were assembled/edited in Pro-Tools.

;;Various FM-Bell textures

define process fmbell1(num, pitch, notes, dis, rev)
  run
    with pat1 = make(<markov>, of: notes),
    pat2 = make(<palindrome>, of: {2/3 1 4/3 5/3 2}),
    pat3 = make(<palindrome>, of: {.025 .05 .1 .2})
    repeat num
    for k = pitch + next(pat1)
    for r = next(pat2)
    for a = next(pat3)
    output make (<fm-bell>, startime: now(), dur: r * 1.2, frequency: hertz(k), amplitude: a, 
                 amp-env: {0 0 1 1 2 1.1000 25 .7500 75 .5000 100 .5000 125 0}, 
                 index-env: {0 0 .1000 1 10 .6000 25 .3000 50 .1500 90 .1000 100 0}, index: 0, distance: dis, reverb-amount: rev)
    wait r
    end

define process fmbell2(num, pitch, notes, rate, amp, dis, rev)
  run
    with pat = make(<markov>, of: notes)
    repeat num
    for k = pitch + next(pat)
    output make (<fm-bell>, startime: now(), dur: rate * pick(1.05, 1.25), frequency: hertz(k), amplitude: amp, 
                 amp-env: {0 1 1 1 2 1.1000 25 .7500 75 .5000 100 .5000 125 0}, 
                 index-env: {0 0 .1000 1 10 .6000 25 .3000 50 .1500 90 .1000 100 0}, index: 1, distance: dis, reverb-amount: rev)
    wait rate
    end

open "belltest.aiff", reverb: quote(nrev)

sprout list(fmbell1(40, 72, markharm, 6, .4),
              fmbell1(40, 72, markharm, 6, .4),
              fmbell1(40, 72, markharm, 6, .4))

open "belltesthigh.aiff", reverb: quote(nrev)
sprout fmbell1(30, 84, markharm, 8, .4)

open "belltestlow.aiff", reverb: quote(nrev)
sprout fmbell2(15, 24, markmel, 4, .5, 4, .1)

;Basic FM-Violin textures:

define process vary-noise-texture(num, rate, freq, amp)
  run
    repeat num
    for k = freq * pick (1, 2/1, 3/2, 4/3, 5/4, 6/5, 7/6)
    output make (<fm-violin>, startime: now(), 
                 dur: rate * between (1.0, 5.0), 
                 frequency: k, amplitude: amp, fm-index: random(5), 
                 amp-env: pick({0 0 1 .5 2 1 3 .5 4 .25 5 0}, 
                               {0 0 .2 .75 1 1 2 .5 3 0}, 
                               {0 0 1 .75 2 1 10 .1 11 0}),
                 noise-amount: between(.000001, .001), 
                 noise-freq: pick(1, 1.41, 2) * k, reverb-amount: .2,
                 degree: random(90), distance: between(5, 10))
    wait rate
    end

sprout vary-noise-texture(20, 1, 110, .5)

play "violintest.aiff"

define process vary-noise-texture2(num, rate, freq, amp)
  run
    repeat num
    for k = freq * pick (1, 2/1, 3/2, 4/3, 5/4, 6/5, 7/6)
    output make (<fm-violin>, startime: now(), 
                 dur: rate * between (1.0, 5.0), 
                 frequency: k, amplitude: amp, fm-index: random(5), 
                 amp-env: pick({0 0 1 .5 2 1 3 .5 4 .25 5 0}, 
                               {0 0 .2 .75 1 1 2 .5 3 0}, 
                               {0 0 1 .75 2 1 10 .1 11 0}),
                 noise-amount: between(.000001, .001), 
                 noise-freq: pick(1, 1, 1, 1, 1.41, 2, 3, 4, 5) * k,
                 reverb-amount: .2, degree: random(90), d
                 istance: between(5, 10))
    wait rate
    end

sprout list (vary-noise-texture2(120, 1, 110, .5),
             vary-noise-texture2(100, 1, 220, .5)), {0 20}

;;Convolution

;Convolved throbbing pattern w/gong

;Convolved basic FM vn pattern w/fm bell (index slowly changed)

;Various bell granulations

open "lowthing2.aiff", srate: 44100, channels: 1, reverb: quote(freeverb)

sprout make(<fullmix>, beg: 0, in-file: "vnindchange.aiff", 
                 inbeg: 25, outdur: 20, srate: -1, matrix: .1)

open "vngrangong9.aiff", srate: 44100, channels: 1, reverb: quote(freeverb)

sprout make(<fullmix>, beg: 0, 
                 in-file: "vngrangong.aiff", outdur: 10,
                 srate: -12, reverb-amount: 1, 
                 matrix: .01)
open "newbellcathedral", srate: 44100, channels: 1, reverb: quote(freeverb)

sprout make(<fullmix>, beg: 0, in-file: "bellcathedral.aiff")







