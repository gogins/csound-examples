;
; "feldman example 3"
; by steven yi
;
; [DESCRIPTION]
; Algorithmically produced music based on Morton Feldman's early graphic scores (box notation). 
; Uses python scripting to "perform" the score, a simple FM instrument, and a convolution reverb.
; 
; This version uses two different instruments and two different "performers" playing the same score.
; 
; 
; [ABOUT FELDMAN'S EARLY MUSIC]
; Morton Feldman's early music were beautifully drawn boxes, three on top of each other per measure.  
; Each of the boxes mapped to either "high" pitches, "middle" pitches, and "low" pitches.  In each box,
; were a number of how many notes to play of that type for that measure, which could be none.
; 
; To capture this compositional method, I wrote a function that would take in a list of lists.  Each index in the
; top list would be a measure, and in that location of the list would be another list of three numbers, referring
; to how many "high", "middle", and "low" pitches to play.  The function randomly picks a start and a random
; frequency bounded to the range set for high, middle, and low and outputs that for that measure.
; 
;
; Generated by blue 0.120.0_beta (http://csounds.com/stevenyi/blue/index.html)
;

<CsoundSynthesizer>

<CsInstruments>
sr=44100
ksmps=1
nchnls=2



ga_bluemix_3_0	init	0
ga_bluemix_3_1	init	0
ga_bluemix_4_0	init	0
ga_bluemix_4_1	init	0
ga_bluesub_Master_0	init	0
ga_bluesub_Master_1	init	0



gi_square		ftgen 0, 0, 65537, 10, 1, 0, 0.111111, 0, 0.4, 0, .020408163, 0, .012345679, 0, .008264463



	opcode getFrequency,i,i

ipch 	xin

iout	= (ipch < 15 ? cpspch(ipch) : ipch)
	
	xout	iout


	endop
	opcode simpleMultiFilter,a,aikk

ain, itype, kfreq, kbandwidth xin

if (itype < 0) then
	aout = ain
elseif (itype == 0) then
	aout butterlp ain, kfreq
elseif (itype == 1) then
	aout butterhp ain, kfreq
elseif (itype == 2) then
	aout butterbp ain, kfreq, kbandwidth
endif

xout aout

	endop
	opcode multiOscil,a,ikk

iwaveform, kpch, kpulsewidth xin


isidtable chnget "sid_tables"

if (isidtable == 0) then
	
	itabtri 	ftgen 0, 0, 4097, 7, -1, 2048, 1, 2049, -1	; tri
;	itabsaw		ftgen 0, 0, 4097, 7, -1, 4096, 1, 1, -1	; saw
	itabsaw		ftgen 0, 0, 4097, 10, 1, .5, .3, .25, .2, .167, .14, .125, .111  
	;itabpulse	ftgen 0, 0, 4097, 7, 1, 2047, 1, 1, -1, 2048, -1, 1, 1	; pulse
	itabpulse	ftgen 0, 0, 4097, 10, 1, 1, 1, 1, .7, .5, .3, .1	
	
	itabtrisaw	ftgen 0, 0, 4097, 10, 0
			tableimix	 itabtrisaw, 0, 4097, itabtri, 0, 1, itabsaw, 0, 1

	itabtripulse	ftgen 0, 0, 4097, 10, 0
			tableimix	 itabtripulse, 0, 4097, itabtri, 0, 1, itabpulse, 0, 1

	itabsawpulse	ftgen 0, 0, 4097, 10, 0
			tableimix	 itabsawpulse, 0, 4097, itabsaw, 0, 1, itabpulse, 0, 1

	itabtrisawpulse	ftgen 0, 0, 4097, 10, 0
			tableimix	 itabtrisawpulse, 0, 4097, itabtri, 0, 1, itabsawpulse, 0, 1

	isidtable 	ftgen 0, 0, 8, -2, itabtri, itabsaw, itabpulse, itabtrisaw, itabtripulse, itabsawpulse, itabtrisawpulse

	chnset isidtable, "sid_tables"

endif

aout = 0
kcount = 0

if (iwaveform == 7) then
	aout 	noise 1, 0
	kcount = 1
endif

if (iwaveform == 0 || iwaveform == 3 || iwaveform == 4 || iwaveform == 6) then
	;aout 	vco2 	1, kpch, 12
	
	kcount = 1
endif

if (iwaveform == 1 || iwaveform == 3 || iwaveform == 6) then
	atemp 	vco2 	1, kpch, 0
	aout = aout + atemp
	kcount = kcount + 1
endif

if (iwaveform == 2 || iwaveform == 4 || iwaveform == 5 || iwaveform == 6) then
	atemp 	vco2 	1, kpch, 2, kpulsewidth
	aout = aout + atemp
	kcount = kcount + 1
endif

aout = aout / kcount

xout aout

	endop
	opcode yiEnvelope,k,ioooooo

ienvType, iattack, idecay, isus, irel, iOldAmp, iNewAmp	xin

itie	tival
idur = p3

iEndAmp = iNewAmp / iOldAmp


if (ienvType == 0) then
	kenv	adsr	iattack, idecay, isus, irel
elseif (ienvType == 1) then	
	kenv 	linseg	0, p3 * .5, 1, p3 * .5, 0
	kenv logcurve kenv, 1.5
elseif (ienvType == 2) then	
	kenv	linseg 	0, p3 - .1, 1, .1, 0	

elseif (ienvType == 3) then

    if (itie == 0 && p3 < 0) then
        ; this is an initial note within a group of tied notes
        kenv	linseg	0, .2, 1,  .2, 1
       
    elseif (p3 > 0 && itie == 1) then
        ; this is an end note out of a group of tied notes
        kenv linseg	1, p3 - 1, 1, 1, 0
 
    elseif (p3 > 0 && itie == 0) then
        ; this is a stand alone note
        kenv adsr iattack, idecay, isus, irel
    else
        ; this is a middle note within a group of tied notes (p3 < 0 && itie == 1)
        kenv line 1, abs(p3), iEndAmp
    endif  

endif

	xout 	kenv


	endop
	opcode blueEffect0,aa,aa

ain1,ain2	xin
aout1, aout2  reverbsc ain1, ain2, 0.85, 8000.0

aout1 = (ain1 * 0.7732706) + (aout1 * (1 - 0.7732706))
aout2 = (ain2 * 0.7732706) + (aout2 * (1 - 0.7732706))


xout	aout1,aout2


	endop


	instr 3	;b64 - Orch
;p3 = p3 + 3.6829162
ipch 	getFrequency p4
ipch2 	getFrequency p5
kpchline 	line ipch, p3, ipch2
iamp 	= ampdb(p6)
iSpace	= p7
ienvType	= p8
kenv	yiEnvelope ienvType, 5.7504816, 0.080503665, 0.86508584, 3.6829162
aout1 	multiOscil 1, kpchline * 6.2992525, 0.521933
aout2 	multiOscil 0, kpchline * 2.3018932, 0.9439412
aout3 	multiOscil 1, kpchline * 1.6736685, 0.13465874
aout1 	simpleMultiFilter	aout1 * 0.90561324, 0, 4545.6396, 314.78778
aout2 	simpleMultiFilter	aout2 * 0.427622, 2, 4696.599, 724.56854
aout3 	simpleMultiFilter	aout3 * 0.6555574, 0, 7787.3667, 299.48398
aout = 0
if (0 == 1) then
	atemp = aout1 * aout3
	aout = atemp
else
	aout = aout1
endif
if (1 == 1) then
	atemp = aout2 * aout1
	aout = aout + atemp
else
	aout = aout + aout2
endif
if (0 == 1) then
	atemp = aout3 * aout2
	aout = aout + atemp
else
	aout = aout + aout3
endif
;aout butterlp aout, 8000
;aout butterhp aout, 500
;aout butterbp aout, 500, 1000
aout = aout * kenv * iamp
ga_bluemix_3_0 = ga_bluemix_3_0 +  aout
ga_bluemix_3_1 = ga_bluemix_3_1 +  aout

	endin

	instr 4	;triangle
ipch 	getFrequency p4
ipch2 	getFrequency p5
kpchline 	line ipch, p3, ipch2
;print ipch, ipch2
iamp 	= ampdb(p6)
iSpace	= p7
ienvType	= p8
itable	= gi_square
kenv	yiEnvelope ienvType, .1, .05, .95, .1
;aout	oscili iamp * kenv, kpchline, itable
;aout	vco 	iamp * kenv, ipch, 3, .5
aout	vco2	1, kpchline, 12
aout2	vco2	1, kpchline + .0009, 12
aout3	vco2	1, kpchline + .0007, 12
aout	sum aout, aout2, aout3
aout	= aout * .333
kCut	= (kpchline * 4 * kenv) + kpchline
kCut    	limit kCut, sr * 0.0002, sr * 0.48
;if kCut < 20000 kgoto kCutPass
;  kCut = 20000
;kCutPass:
;printk2 kCut
aout 	butterlp aout, kCut
aout	= aout * iamp * kenv
iSpace	= iSpace * 3.14159265359 * .5
krtl     	= sqrt(2) / 2 * (cos(iSpace) + sin(iSpace)) ; CONSTANT POWER PANNING
krtr     	= sqrt(2) / 2 * (cos(iSpace) - sin(iSpace)) ; FROM C.ROADS "CM TUTORIAL" pp460
aLeft 	=	aout * krtl
aRight	=	aout * krtr
ga_bluemix_4_0 = ga_bluemix_4_0 +  aLeft
ga_bluemix_4_1 = ga_bluemix_4_1 +  aRight

	endin

	instr 5	;Blue Mixer Instrument
ga_bluesub_Master_0	sum	ga_bluesub_Master_0, ga_bluemix_3_0
ga_bluesub_Master_1	sum	ga_bluesub_Master_1, ga_bluemix_3_1
ga_bluesub_Master_0	sum	ga_bluesub_Master_0, ga_bluemix_4_0
ga_bluesub_Master_1	sum	ga_bluesub_Master_1, ga_bluemix_4_1
ga_bluesub_Master_0, ga_bluesub_Master_1	blueEffect0	ga_bluesub_Master_0, ga_bluesub_Master_1
outc ga_bluesub_Master_0, ga_bluesub_Master_1
ga_bluemix_3_0 = 0
ga_bluemix_3_1 = 0
ga_bluemix_4_0 = 0
ga_bluemix_4_1 = 0
ga_bluesub_Master_0 = 0
ga_bluesub_Master_1 = 0

	endin


</CsInstruments>

<CsScore>













i3	1.9053338	1.0905482769	1371.1812174234296	1371.1812174234296	70	0	0
i3	1.9486771	1.0905482769	1317.7389655080542	1317.7389655080542	70	0	0
i3	7.45589	1.0905482769	428.58159963060393	428.58159963060393	70	0	0
i3	7.686482	1.0905482769	153.81023747781342	153.81023747781342	70	0	0
i3	7.712306	1.0905482769	72.2849747734625	72.2849747734625	70	0	0
i3	9.642353	1.0905482769	1194.3781841730292	1194.3781841730292	70	0	0
i3	8.530937	1.0905482769	229.0888832829226	229.0888832829226	70	0	0
i3	9.346875	1.0905482769	198.13707175632777	198.13707175632777	70	0	0
i3	9.204435	1.0905482769	119.1035624680544	119.1035624680544	70	0	0
i3	9.532191	1.0905482769	216.87755125148584	216.87755125148584	70	0	0
i3	9.027132	1.0905482769	82.52917442455436	82.52917442455436	70	0	0
i3	11.275748	1.0905482769	1656.107565156567	1656.107565156567	70	0	0
i3	11.184928	1.0905482769	1419.6584457952458	1419.6584457952458	70	0	0
i3	16.011215	1.0905482769	704.312789142539	704.312789142539	70	0	0
i3	16.041359	1.0905482769	953.2839023961238	953.2839023961238	70	0	0
i3	17.465927	1.0905482769	1431.281153541398	1431.281153541398	70	0	0
i3	18.462381	1.0905482769	160.41415152184106	160.41415152184106	70	0	0
i3	17.848097	1.0905482769	192.3975501327136	192.3975501327136	70	0	0
i3	16.760536	1.0905482769	175.90578917734229	175.90578917734229	70	0	0
i3	18.187334	1.0905482769	82.58846200075851	82.58846200075851	70	0	0
i3	25.236565	1.0905482769	863.8803819199401	863.8803819199401	70	0	0
i3	25.099472	1.0905482769	307.16774803395845	307.16774803395845	70	0	0
i3	25.288868	1.0905482769	894.5758220858804	894.5758220858804	70	0	0
i3	23.604805	1.0905482769	62.863786437131864	62.863786437131864	70	0	0
i3	23.326223	1.0905482769	146.87666526436192	146.87666526436192	70	0	0
i3	26.038904	1.0905482769	430.4419843430812	430.4419843430812	70	0	0
i3	25.952202	1.0905482769	494.293213440828	494.293213440828	70	0	0
i3	25.79378	1.0905482769	173.77712869364956	173.77712869364956	70	0	0
i3	26.977793	1.0905482769	160.0124924100764	160.0124924100764	70	0	0
i3	26.06441	1.0905482769	202.31057997485854	202.31057997485854	70	0	0
i3	32.663334	1.0905482769	1869.4476886828434	1869.4476886828434	70	0	0
i3	32.90945	1.0905482769	740.927209722487	740.927209722487	70	0	0
i3	32.19907	1.0905482769	171.73959768348578	171.73959768348578	70	0	0
i4	2.3418474	1.1926184893	1726.087703616201	1726.087703616201	70	0	0
i4	1.57764	1.1926184893	1350.8306292948596	1350.8306292948596	70	0	0
i4	6.988646	1.1926184893	688.2841936944486	688.2841936944486	70	0	0
i4	4.830652	1.1926184893	154.13406699156783	154.13406699156783	70	0	0
i4	6.403543	1.1926184893	227.28205931608773	227.28205931608773	70	0	0
i4	8.084365	1.1926184893	1832.1913161163668	1832.1913161163668	70	0	0
i4	9.446468	1.1926184893	86.55032694552588	86.55032694552588	70	0	0
i4	8.99657	1.1926184893	206.93145488522075	206.93145488522075	70	0	0
i4	7.9847803	1.1926184893	108.70640884079675	108.70640884079675	70	0	0
i4	7.247322	1.1926184893	206.58787796692826	206.58787796692826	70	0	0
i4	7.65889	1.1926184893	211.6535181254823	211.6535181254823	70	0	0
i4	11.560148	1.1926184893	1742.9372855065108	1742.9372855065108	70	0	0
i4	10.877757	1.1926184893	1559.9670025032935	1559.9670025032935	70	0	0
i4	15.889269	1.1926184893	420.60266610926533	420.60266610926533	70	0	0
i4	14.918991	1.1926184893	477.75855535983396	477.75855535983396	70	0	0
i4	19.057198	1.1926184893	1800.092860462279	1800.092860462279	70	0	0
i4	17.95489	1.1926184893	166.3531391899583	166.3531391899583	70	0	0
i4	18.395205	1.1926184893	98.06540705211802	98.06540705211802	70	0	0
i4	17.806559	1.1926184893	112.2597824520613	112.2597824520613	70	0	0
i4	19.067993	1.1926184893	127.88941162428321	127.88941162428321	70	0	0
i4	26.208763	1.1926184893	789.9873123041989	789.9873123041989	70	0	0
i4	25.587938	1.1926184893	642.9683932720384	642.9683932720384	70	0	0
i4	25.985016	1.1926184893	931.0997936110996	931.0997936110996	70	0	0
i4	26.113337	1.1926184893	77.48068768962433	77.48068768962433	70	0	0
i4	25.474546	1.1926184893	84.54371459333258	84.54371459333258	70	0	0
i4	27.549261	1.1926184893	269.0589453942022	269.0589453942022	70	0	0
i4	26.835812	1.1926184893	763.7455264146772	763.7455264146772	70	0	0
i4	28.066399	1.1926184893	197.90894669153843	197.90894669153843	70	0	0
i4	26.789497	1.1926184893	117.37531472324108	117.37531472324108	70	0	0
i4	27.105814	1.1926184893	202.3552115005183	202.3552115005183	70	0	0
i4	33.508865	1.1926184893	1193.7680055600986	1193.7680055600986	70	0	0
i4	34.407375	1.1926184893	555.5901770335918	555.5901770335918	70	0	0
i4	33.911156	1.1926184893	61.46957709346441	61.46957709346441	70	0	0
i5	0	40.5999946594	
e

</CsScore>

</CsoundSynthesizer>