; BAY.GEN
; -------
; JLDiaz, 2005
;
; This is a ngen implementation of the ideas at
; http://akozar.spymac.net/music/ I used Anthony Kozar's CommonLisp
; source code as starting point, and converted it to ngen macros. The
; original algorithm was then expanded, for allowing more control on
; some, otherwise fixed, parameters, like the note lengths.
;
; This file should be run trough ngen (it generates a lot of on-screen
; info and warnings, which which can be safely ignored). The resulting
; score can be processed with csound using the orchestra file bay.orc
;
; If run within blue, it could be neccesary to adjust the path to the
; ngen utility, in the field "command line", located above the window
; in which you are reding this.
;
;
; ALGORITHM DESCRIPTION
; ---------------------
;
; The algorithm is very simple, but leads to interesting results. The
; composer selects a note by name (eg. 'a2'), and other parameters
; govering the random process. The algorithm produces several
; activations of this note, separated by a interval of random
; length. The lenght of the note and its midi velocity are also
; random. The composer can specify the limits for these random
; quantities.
;
; The composer can call this algorithm several times, with different
; parameters each time.  Each invocation produces a random stream of
; repeating notes, all starting at zero. The ramdom length of the
; intervals leads to unexpected melodies, chords and dissonancies.

; IMPLEMENTATION
; Random seed:
rs(1982) ; This was the year in which I, still a boy, bought an
	 ; electonic organ and composed my first piece "The bay" :-)

; Some constants governing the piece
#define TEMPO #28#  ; beats per second

; In the following line, you define the total lenght of the piece, in
; beats. The duration in seconcs would be roughly equal to
; TOTALLENGHT*60/TEMPO
#define TOTALLENGTH #800#


; Set the tempo
te($TEMPO)


; The following macro creates a sequence of a repeating note, with
; random interval among notes, random lenght of each note and random
; midi velocity. The randomness can be controlated through the
; parameters:
;
;   NOTE  Name of the note (eg. 'a2')
;   IMIN  Minimum length of the interval betwen "note-on" events
;   IMAX  Maximum length of the interval between "note-on" events
;   LEN   Average length of the note (the actual lenght is a slight
;         random variation of the specified length)
;   VMIN  Minimum midi velocity
;   VMAX  Maximum midi velocity
;
; The macro generates csound score events, with the following meaning:
; p2 = starting time
; p3 = note length
; p4 = note frequency (Hertz)
; p5 = note amplitude (midi velocity)
; p6 = panning (this is also randomly generated, to be most of the time
;      near of the extremes of the stereo field)

#define GENERATE(NOTE'IMIN'IMAX'LEN'VMIN'VMAX) 
#
i1 = 6 0 $TOTALLENGTH {
 p2 ra(T*0.99, 1 [$IMIN $IMAX])
 p3 0, rd(.1) $LEN
 p4(hz) rd(0) no $NOTE
 p5 ra(T, 1 [$VMIN $VMAX])
 p6(re2) ra(T*0.99, .45 [0 .2] .1 [.2 .8] .45 [.8 1])
}#


; ****************************************************************
; Note generation
; ****************************************************************
; Start the effects instruments:
; Chorus             delay     divisor
> i10 0   1712.532    10            30


; Reverb   len        gain   rndpitch  cutoff-feedbk
> i25 0 [1712.532+15] .98   .8         20000

; Mixer
;     len         gain  t-fadeout
> i30 0 1712.532  2     30   


; Now we can specify a set of notes to be generated.  Note that the
; lengths are 400+n, being n the intended note length (in beats).  It
; is noeccesary to add 400 to the lengths to force ngen to treat these
; lengths as absolute The notes used in this example are from F major
; and A minor

; $GENERATE(NOTE#IMIN#IMAX#LEN#VMIN#VMAX) 
$GENERATE(f2#5#10#406#60#90)
$GENERATE(a2#5#10#406#60#90)
$GENERATE(c3#5#20#404#60#90)
$GENERATE(e3#5#12#404#60#90)
$GENERATE(f3#6#12#404#60#90)
$GENERATE(e4#5#12#404#60#90)
$GENERATE(a4#4#10#404#60#90)
$GENERATE(b4#4#12#403#60#90)
$GENERATE(c5#4#10#403#60#85)
$GENERATE(d5#6#15#402#60#80)
$GENERATE(e5#4#10#403#60#80)

; As described above, each stream generated by the macro consists on
; the repetition of a single note, randomly spaced. However, nothing
; stops us to pass a set of notes to the macro, instead of of a single
; note.
$GENERATE(se(T, 1.[c4 df4 d4])#10#20#403#60#90)
; In this case I use this technique to ocasionally introduce a C# note
; (which changes the tonality to A major) among C and D notes, (which
; return the tonality to A minor).  If I used three GENERATE instead
; (one per note), it would de possible that these trhee notes coincide
; in time, causing ugly dissonances. Using a set, I allow the
; production of these notes, and at same time I avoid collisions among
; them.

